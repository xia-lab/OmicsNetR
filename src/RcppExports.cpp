// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// path_annotate
StringVector path_annotate(DataFrame ilp_nodes, DataFrame canu_met, DataFrame ilp_edges_anno_met, NumericMatrix dis_mat_met, List g_annotation, DataFrame canu_nonmet, DataFrame ilp_edges_anno_nonmet, NumericMatrix dis_mat_nonmet, List g_anno_non);
RcppExport SEXP _OmicsNetR_path_annotate(SEXP ilp_nodesSEXP, SEXP canu_metSEXP, SEXP ilp_edges_anno_metSEXP, SEXP dis_mat_metSEXP, SEXP g_annotationSEXP, SEXP canu_nonmetSEXP, SEXP ilp_edges_anno_nonmetSEXP, SEXP dis_mat_nonmetSEXP, SEXP g_anno_nonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type ilp_nodes(ilp_nodesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type canu_met(canu_metSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ilp_edges_anno_met(ilp_edges_anno_metSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dis_mat_met(dis_mat_metSEXP);
    Rcpp::traits::input_parameter< List >::type g_annotation(g_annotationSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type canu_nonmet(canu_nonmetSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ilp_edges_anno_nonmet(ilp_edges_anno_nonmetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dis_mat_nonmet(dis_mat_nonmetSEXP);
    Rcpp::traits::input_parameter< List >::type g_anno_non(g_anno_nonSEXP);
    rcpp_result_gen = Rcpp::wrap(path_annotate(ilp_nodes, canu_met, ilp_edges_anno_met, dis_mat_met, g_annotation, canu_nonmet, ilp_edges_anno_nonmet, dis_mat_nonmet, g_anno_non));
    return rcpp_result_gen;
END_RCPP
}
// matchHMDB
StringVector matchHMDB(DataFrame annotation, DataFrame Restable, int peakidx, int formularidx);
RcppExport SEXP _OmicsNetR_matchHMDB(SEXP annotationSEXP, SEXP RestableSEXP, SEXP peakidxSEXP, SEXP formularidxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type annotation(annotationSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Restable(RestableSEXP);
    Rcpp::traits::input_parameter< int >::type peakidx(peakidxSEXP);
    Rcpp::traits::input_parameter< int >::type formularidx(formularidxSEXP);
    rcpp_result_gen = Rcpp::wrap(matchHMDB(annotation, Restable, peakidx, formularidx));
    return rcpp_result_gen;
END_RCPP
}
// convert2KEGG
StringVector convert2KEGG(StringVector HMDBIDs, DataFrame database);
RcppExport SEXP _OmicsNetR_convert2KEGG(SEXP HMDBIDsSEXP, SEXP databaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type HMDBIDs(HMDBIDsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type database(databaseSEXP);
    rcpp_result_gen = Rcpp::wrap(convert2KEGG(HMDBIDs, database));
    return rcpp_result_gen;
END_RCPP
}
// initialize_structureset
List initialize_structureset(List NodeSet);
RcppExport SEXP _OmicsNetR_initialize_structureset(SEXP NodeSetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type NodeSet(NodeSetSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_structureset(NodeSet));
    return rcpp_result_gen;
END_RCPP
}
// Heterodimer_connection_core
List Heterodimer_connection_core(List pgroup, double ppm);
RcppExport SEXP _OmicsNetR_Heterodimer_connection_core(SEXP pgroupSEXP, SEXP ppmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgroup(pgroupSEXP);
    Rcpp::traits::input_parameter< double >::type ppm(ppmSEXP);
    rcpp_result_gen = Rcpp::wrap(Heterodimer_connection_core(pgroup, ppm));
    return rcpp_result_gen;
END_RCPP
}
// fast_calculate_formula
StringVector fast_calculate_formula(StringVector formular1, StringVector transformulas, int sign);
RcppExport SEXP _OmicsNetR_fast_calculate_formula(SEXP formular1SEXP, SEXP transformulasSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type formular1(formular1SEXP);
    Rcpp::traits::input_parameter< StringVector >::type transformulas(transformulasSEXP);
    Rcpp::traits::input_parameter< int >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_calculate_formula(formular1, transformulas, sign));
    return rcpp_result_gen;
END_RCPP
}
// propagate_heterodimer_core
List propagate_heterodimer_core(DataFrame df_heterodimer, List sf, StringVector propagation_category, NumericVector node_mass, double ppm_threshold);
RcppExport SEXP _OmicsNetR_propagate_heterodimer_core(SEXP df_heterodimerSEXP, SEXP sfSEXP, SEXP propagation_categorySEXP, SEXP node_massSEXP, SEXP ppm_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_heterodimer(df_heterodimerSEXP);
    Rcpp::traits::input_parameter< List >::type sf(sfSEXP);
    Rcpp::traits::input_parameter< StringVector >::type propagation_category(propagation_categorySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_mass(node_massSEXP);
    Rcpp::traits::input_parameter< double >::type ppm_threshold(ppm_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate_heterodimer_core(df_heterodimer, sf, propagation_category, node_mass, ppm_threshold));
    return rcpp_result_gen;
END_RCPP
}
// call_sr
List call_sr(CharacterVector from, CharacterVector to, NumericVector cost, CharacterVector node_names, NumericVector node_prizes);
RcppExport SEXP _OmicsNetR_call_sr(SEXP fromSEXP, SEXP toSEXP, SEXP costSEXP, SEXP node_namesSEXP, SEXP node_prizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cost(costSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_prizes(node_prizesSEXP);
    rcpp_result_gen = Rcpp::wrap(call_sr(from, to, cost, node_names, node_prizes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OmicsNetR_path_annotate", (DL_FUNC) &_OmicsNetR_path_annotate, 9},
    {"_OmicsNetR_matchHMDB", (DL_FUNC) &_OmicsNetR_matchHMDB, 4},
    {"_OmicsNetR_convert2KEGG", (DL_FUNC) &_OmicsNetR_convert2KEGG, 2},
    {"_OmicsNetR_initialize_structureset", (DL_FUNC) &_OmicsNetR_initialize_structureset, 1},
    {"_OmicsNetR_Heterodimer_connection_core", (DL_FUNC) &_OmicsNetR_Heterodimer_connection_core, 2},
    {"_OmicsNetR_fast_calculate_formula", (DL_FUNC) &_OmicsNetR_fast_calculate_formula, 3},
    {"_OmicsNetR_propagate_heterodimer_core", (DL_FUNC) &_OmicsNetR_propagate_heterodimer_core, 5},
    {"_OmicsNetR_call_sr", (DL_FUNC) &_OmicsNetR_call_sr, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_OmicsNetR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
